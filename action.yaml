name: 'Update and apply kubernetes configuration files'
description: 'Update kubernetes configuration yamls and apply them to the current cluster'
author: 'software.com'
branding:
  icon: upload-cloud
  color: blue
inputs:
  k8-config-file-paths:
    description: 'Paths where the k8 configuration files are located'
    required: true
  replacement-method:
    description: 'Type of ENV variable replacement.(defined, list, all)'
    required: false
    default: 'defined'
  env-replacement-list:
    description: 'List of ENV variable names to replace. Only required when using replacement method of list'
    required: false
    default: ''
  namespace:
    description: Namespace to apply the resources. Note that this will only take effect if the yaml does not set a namespace.
    required: false
    default: 'default'
runs:
  using: 'composite'
  steps:
    - name: Get current namespace
      id: get-original-namespace
      run: |
        current_namespace=$(kubectl config view --minify -o jsonpath="{..namespace}")
        current_namespace=${current_namespace:-"default"}
        echo "::set-output name=namespace::$current_namespace"
      shell: bash
    - name: Set namespace
      run: kubectl config set-context --current --namespace ${{ inputs.namespace }}
      shell: bash
    - name: Substitute variables and apply files
      run: |
        envsubst_arg=''
        if [ ${{ inputs.replacement-method }} = "defined" ]; then
          envsubst_arg="$(perl -e 'print "\$$_" for grep /^[_a-zA-Z]\w*$/, keys %ENV')"
        elif [ ${{ inputs.replacement-method }} = "list" ]; then
          list=(${{ inputs.env-replacement-list }})
          for env in "${list[@]}"; do
            envsubst_arg+="\${$env}"
          done
        fi
        k8_files=(${{ inputs.k8-config-file-paths }})
        for file in "${k8_files[@]}"; do
          template=`cat $file | envsubst $envsubst_arg`
          echo "$template"
          echo "$template" | kubectl apply -f -
        done
      shell: bash
    - name: Set namespace to original value
      run: kubectl config set-context --current --namespace ${{ steps.get-original-namespace.outputs.namespace }}
      shell: bash
